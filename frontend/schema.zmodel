// This is a sample model to get you started.

/**
 * A sample data source using local sqlite db.
 */
datasource db {
    provider = 'postgresql'
    url      = env("DATABASE_URL")
}

plugin hooks {
  provider = '@zenstackhq/swr'
  output = "./lib/hooks"
}

plugin zod {
  provider = '@core/zod'
}

generator client {
    provider = "prisma-client-js"
}

/**
 * User model
 */
model User {
  id                    String     @id @default(uuid())
  name                  String     
  email                 String?    @unique @email
  emailVerified         DateTime?
  image                 String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  accounts              Account[]
  events                Schedule[]

  // everyone can signup, and user profile is also publicly readable
  @@allow('create', true)

  // only the user can update or delete their own profile
  @@allow('read,update,delete', auth() == this)
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  type                 String?
  provider           String
  providerAccountId  String
  token_type         String?
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  scope              String?
  id_token           String?   @db.Text
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])

  // everyone can signup, and user profile is also publicly readable
  @@allow('create', true)

  // only the user can update or delete their own profile
  @@allow('update,delete', auth() == user )
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])

  // everyone can signup, and user profile is also publicly readable
  @@allow('create', true)
}

model Event {
  id         String   @id @default(cuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  schedules  Schedule[]
  @@allow('all',true)
}

model  Schedule {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  eventId    String
  event      Event    @relation(fields: [eventId], references: [id])
  users User[]

  @@allow('all',true)
}