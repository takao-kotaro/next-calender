//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// @@allow('create', true)
/// @@allow('read,update,delete', auth() == this)
model User {
  id            String     @id() @default(uuid())
  name          String
  /// @email
  email         String?    @unique()
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt()
  accounts      Account[]
  events        Schedule[]
}

/// @@allow('create', true)
/// @@allow('update,delete', auth() == user)
model Account {
  id                String   @id() @default(cuid())
  userId            String
  type              String?
  provider          String
  providerAccountId String
  token_type        String?
  refresh_token     String?  @db.Text()
  access_token      String?  @db.Text()
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text()
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt()
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/// @@allow('create', true)
model VerificationRequest {
  id         String   @id() @default(cuid())
  identifier String
  token      String   @unique()
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()

  @@unique([identifier, token])
}

/// @@allow('all', true)
model Event {
  id        String     @id() @default(cuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt()
  schedules Schedule[]
}

/// @@allow('all', true)
model Schedule {
  id        String   @id() @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  users     User[]
}
